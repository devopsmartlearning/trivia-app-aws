version: 0.2  # Versão do formato do ficheiro buildspec

# Variáveis de ambiente que podem ser sobrescritas no projeto CodeBuild
env:
  variables:
    ENV: qa  # Pode ser 'dev', 'qa' ou 'prod'. Define o ambiente de destino do deploy.

phases:
  install:  # Fase de instalação – instala dependências do backend e dos testes
    commands:
      - pip3 install -U -r back-end-python/gameactions/requirements.txt  # Dependências da aplicação
      - pip3 install -U -r back-end-python/tests/requirements.txt        # Dependências dos testes
  build:  # Fase de testes e análise estática
    commands: # Avaliação da qualidade do código # Testes unitários com cobertura
      - pylint --fail-under=8 back-end-python/gameactions/app.py  
      - pytest back-end-python/tests/unit \                        
          --junit-xml=unittests.xml \
          --cov-report=xml \
          --cov=gameactions \
          --cov-branch
  post_build:  # Fase de build e deployment do SAM
    commands:
      - echo Building SAM template...
      - sam build  # Compila as funções Lambda
      - echo Packaging SAM template... # Prepara template com os artefactos para o S3
      - sam package \  
          --s3-bucket trivia-app-$ENV \
          --output-template-file packaged.yaml
      - echo Deploying to environment $ENV...
      # Faz o deploy para a stack correspondente (trivia-app-dev, qa ou prod)
      - sam deploy \  
          --template-file packaged.yaml \
          --stack-name trivia-app-$ENV \
          --capabilities CAPABILITY_IAM \
          --region eu-west-1 \
          --no-confirm-changeset \
          --no-fail-on-empty-changeset

# Definição de relatórios de testes e cobertura
reports:
  UnitTests:
    files:
      - 'unittests.xml'
  NewCoverage:
    files:
      - 'coverage.xml'
    file-format: COBERTURAXML

# Artefactos que serão guardados pelo CodeBuild (útil para consulta ou exportação)
artifacts:
  files:
    - template.yaml
    - packaged.yaml
    - build/**/*
